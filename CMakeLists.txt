cmake_minimum_required(VERSION 2.6)
project(robobot)
#find_package(raspicam REQUIRED)
find_package(raspicam)
# Finding flex and Bison for possible parser generation
find_package(BISON)
find_package(FLEX)
if (raspicam_FOUND)
  set(EXTRA_CC_FLAGS " -O2 -g0")
  message("CMAKE found raspberry camere module")
  add_definitions(-Draspicam_CV_LIBS)
else()
  message("CMAKE set to compile without rapberry pi camera modules")
  set(EXTRA_CC_FLAGS "-DNO_PI_CAM -O0 -g2")
endif()
find_package(OpenCV REQUIRED )
find_package(Threads REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -pedantic -std=c++11 ${EXTRA_CC_FLAGS}")
set(CMAKE_C_FLAGS ${CMAKE_C_FLAGS} "-pthread")

if (BISON_FOUND AND FLEX_FOUND)

	BISON_TARGET(MissionParser "mission_parser/mission.y" ${CMAKE_SOURCE_DIR}/mission_parser/mission_parser.c)
	FLEX_TARGET(MissionScanner "mission_parser/mission.l" ${CMAKE_SOURCE_DIR}/mission_parser/mission_lexer.c)
	ADD_FLEX_BISON_DEPENDENCY(MissionScanner MissionParser)

	set_source_files_properties(${FLEX_mission_parser_OUTPUTS} PROPERTIES COMPILE_FLAGS "-lfl")
	add_executable(mission_parser ${BISON_MissionParser_OUTPUTS} ${FLEX_MissionScanner_OUTPUTS} "mission_parser/parser_test.cpp" uloader.cpp)
	target_link_libraries(mission_parser ${FLEX_LIBRARIES})

endif()

add_executable(mission main.cpp urun.cpp ucamera.cpp ubridge.cpp umission.cpp utime.cpp tcpCase.cpp uevent.cpp ujoy.cpp uinfo.cpp umotor.cpp uedge.cpp upose.cpp uirdist.cpp uaccgyro.cpp uaruco.cpp ulibpose2pose.cpp ulib2dline.cpp ulibpose.cpp ulibposev.cpp uloader.cpp "mission_parser/mission_lexer.c")
#add_compile_options(mission_parser PUBLIC "-lfl" )


file(GLOB_RECURSE MISSIONS "missions/*")
file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/missions")
foreach(file ${MISSIONS})
	message("CMAKE copying ${file} to binary directory")
	configure_file(${file} "./missions" COPYONLY)
endforeach()
#configure_file(${MISSIONS} "./missions/" COPYONLY)
target_link_libraries(mission ${OpenCV_LIBS} ${raspicam_CV_LIBS} ${CMAKE_THREAD_LIBS_INIT})
install(TARGETS mission RUNTIME DESTINATION bin)
